#!/bin/sh -e
# Copyright (c) 2014 The crouton Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is a distro-specific bootstrap script, sourced from main.sh, and as such
# has access to all of the variables set by main.sh, namely $tmp (the temporary
# directory), $INSTALLERDIR/$DISTRO, $RELEASE, $ARCH, and $MIRROR.

# This code is loosely based on a script found on the Arch Linux Wiki:
# https://wiki.archlinux.org/index.php/Install_from_Existing_Linux

# This isn't the prettiest way to do this, but it's how the other bash scripts
# in this project do it, and who am I to challenge tradition?
BINDIR="`dirname "\`readlink -f -- "$0"\`"`"
BINDIR="`dirname \"$BINDIR\"`"/host-bin

# see comment in installer/arch/defaults for why this is needed
pacarch=$(echo $ARCH | sed 's/arm64/aarch64/')

REPOS='core community extra'

if [ "${ARCH#arm}" != "$ARCH" ]; then
    REPOS="$REPOS alarm aur"
fi

# Packages to install in the bootstrap chroot. Dependencies are automatically
# fetched, but finding a suitable virtual package is not supported, so we have
# to list them manually:
# - bash provides sh
# - gawk provides awk
PACKAGES_BOOTSTRAP="bash gawk grep pacman sed util-linux"

# systemd is needed because it has systemd-sysusers, which pacman uses in order
# to create system users during post-install hooks. systemd depends on iptables,
# which then depends on libusbx. libusbx isn't a package, but is provided by
# libusb, so we have to manually include that too.
PACKAGES_BOOTSTRAP="$PACKAGES_BOOTSTRAP libusb systemd"

# On Arch Linux ARM, manually add keyring to bootstrap image
if [ "${ARCH#arm}" != "$ARCH" ]; then
    PACKAGES_BOOTSTRAP="$PACKAGES_BOOTSTRAP archlinuxarm-keyring"
fi

# On Arch Linux 32, manually add keyring to bootstrap image
if [ "$ARCH" = 'i686' ]; then
    PACKAGES_BOOTSTRAP="$PACKAGES_BOOTSTRAP archlinux32-keyring-transition"
fi

LIST="$tmp/list"
FETCHDIRDB="$tmp/db"
FETCHDIRPKG="$tmp/packages"
BOOTSTRAPCHROOT="$tmp/$subdir"

curlparams="-L"
# Display progress bar only if we are outputing to a tty
if [ -t 2 ]; then
    curlparams="$curlparams -#"
fi

# Try to download a file, at most 10 times (same as deboostrap)
curlretry() {
    try=0
    while [ $try -lt 10 ]; do
        try="$((try+1))"
        if curl $curlparams "$@"; then
            return 0
        fi
        ret=$?
        sleep 1
    done
    return "$ret"
}

mkdir -p "$FETCHDIRDB" "$FETCHDIRPKG" "$BOOTSTRAPCHROOT"

echo "Fetching repository packages list..." 1>&2
# Fetch Arch package database
for repo in $REPOS; do
    echo "Fetching $repo..." 1>&2
    mirrorbase="`echo "$MIRROR" | sed -e "s/\\$repo/$repo/" \
    -e "s/\\$arch/$pacarch/"`"
    curlretry -o "$FETCHDIRDB/$repo.db" "$mirrorbase/$repo.db" 1>&2
    # Create package list in this format: $repo:package-version
    tar tf "$FETCHDIRDB/$repo.db" \
    | sed -n 's|^\(.*\)/$|'"$repo"':\1|p' >> "$LIST"
done

# Get the value of a field in the Arch package database
# getdbfield repo pkgver [desc|depends] field
getdbfield() {
    local repo="$FETCHDIRDB/$1.db"
    local file="$2/$3"
    local field="$4"
    
    # since pacman-3.5 depends have been merged into desc file for most packages
    if [ "$3" = "depends" ] && ! (tar tf "$repo" | grep -q "$file"); then
        getdbfield "$1" "$2" "desc" "$4"
    else
        # Extract the relevant file
        tar xf "$repo" -O "$file" | awk '
            /^$/ { m = 0 }
            m { print }
            /^%'"$field"'%$/ { m = 1 }
        '
    fi
}

echo "Downloading and extracting packages..." 1>&2
# Final space critical for element extraction
missing="$PACKAGES_BOOTSTRAP "
installed=" "
bootstrappkg=""

# Install packages, taking care of dependencies:
# - Remove first package in $missing.
# - If package has not been installed already, install it, and record all
#   dependencies in $missing.
# - Loop until $missing is empty.

while [ -n "$missing" ]; do
    package="${missing%% *}"
    missing="${missing#$package }"
    
    # skip libncursesw.so (fix issue #100)
    if [ "$package" = "libncursesw.so" ]; then
        echo "Skipping: $package"
        installed="$installed $package "
        continue
    fi
    
    # Do not install if already installed
    if [ "${installed#*" $package "}" != "$installed" ]; then
        continue
    fi
    
    pkg="`grep ":$package-[0-9]" "$LIST" | tail -1`"
    repo="${pkg%%:*}"
    pkgver="${pkg#*:}"
    if [ -z "$pkg" ]; then
        echo "Cannot find package $package..." 1>&2
        exit 1
    else
        echo "$pkgver" 1>&2
    fi
    
    file="`getdbfield "$repo" "$pkgver" "desc" "FILENAME"`"
    mirrorbase="`echo "$MIRROR" | sed -e "s/\\$repo/$repo/" \
    -e "s/\\$arch/$pacarch/"`"
    curlretry -o "$FETCHDIRPKG/$file" "$mirrorbase/$file" 1>&2
    tar --warning=no-unknown-keyword -xf "$FETCHDIRPKG/$file" --overwrite \
    --exclude=".PKGINFO" --exclude=".MTREE" \
    --exclude=".INSTALL" --exclude=".Changelog" \
    -C "$BOOTSTRAPCHROOT"
    
    # Get list of dependencies (ignore versions)
    ndep="`getdbfield "$repo" "$pkgver" "depends" "DEPENDS" \
    | sed -n 's/^\([^<>=]*\).*$/\1/p' | tr '\n' ' '`"
    
    # Some packages provide virtual packages (e.g. bash provides sh):
    # Add those to the installed list
    nprovides="`getdbfield "$repo" "$pkgver" "depends" "PROVIDES" \
    | sed -n 's/^\([^<>=]*\).*$/\1/p' | tr '\n' ' '`"
    
    bootstrappkg="$bootstrappkg $package"
    installed="$installed $nprovides $package "
    missing="$missing $ndep"
done

# Move databases to bootstrap fs
mkdir -p "$BOOTSTRAPCHROOT/var/lib/pacman/sync"
mv "$FETCHDIRDB"/*.db "$BOOTSTRAPCHROOT/var/lib/pacman/sync"
# Move package tarballs, so we can reinstall them properly
mkdir -p "$BOOTSTRAPCHROOT/var/cache/pacman/pkg"
mv "$FETCHDIRPKG"/* "$BOOTSTRAPCHROOT/var/cache/pacman/pkg"

echo "arch" > "$BOOTSTRAPCHROOT/etc/hostname"

# Make sure package architecture is set manually.
# Using the default Auto here detects the chroot from uname -m, breaking i686
# chroots on x86-64.
sed -i 's/^[ \t]*Architecture[ \t].*/Architecture = '"$pacarch"'/' \
"$BOOTSTRAPCHROOT/etc/pacman.conf"

echo "$bootstrappkg" > "$BOOTSTRAPCHROOT"/crouton-bootstrap-pkg

# this happens in installer/main.sh, but only after bootstrap has run, and we
# need it to exist for enter-chroot below to work
mkdir -p "$BOOTSTRAPCHROOT/etc/crouton"

# Theoretically this _could_ happen within prepare (and it used to), but the
# enter-chroot call for prepare uses a -xx flag, which causes it to try and set
# up dbus, which fails because at this point pacman hasn't properly run and
# therefore hasn't created the dbus user. So we do this crap in here instead.
sh -e $BINDIR/enter-chroot -x -c "$(dirname $BOOTSTRAPCHROOT)" \
    -n "$(basename $BOOTSTRAPCHROOT)" \
    /bin/sh -c "
        pacman-key --init
        if [ '${ARCH#arm}' = '$ARCH' ]; then
            pacman-key --populate archlinux
        else
            # archlinuxarm-keyring has been installed as part of bootstrap
            pacman-key --populate archlinuxarm
        fi

        # Force overwritting packages files in the bootstrap, without any sort
        # of dependency checking: this makes sure package content are properly
        # recorded
        pacman -S --nodeps --asdeps --noconfirm --overwrite '*' $bootstrappkg

        # TODO: remove this when the slow sudo issue is fixed:
        # https://github.com/dnschneid/crouton/issues/3823
        pacman -U --noconfirm https://archive.archlinux.org/packages/l/libsystemd/libsystemd-238.133-4-x86_64.pkg.tar.xz https://archive.archlinux.org/packages/s/systemd/systemd-238.133-4-x86_64.pkg.tar.xz
        echo -e '[options]\nIgnorePkg = systemd libsystemd' >> /etc/pacman.conf
"
